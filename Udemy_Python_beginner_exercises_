{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Write a program that prints the integers 1 through 50 using a loop.\n",
    "\n",
    "However, for numbers which are multiples of both 3 and 5 print “FizzBuzz” in the output. For numbers which are multiples of 3 but not 5 print “Fizz” instead of the number and for the numbers that are multiples of 5 but not 3 print “Buzz” instead of the number.\n",
    "\n",
    "All of the remaining numbers which are not multiples of 3 or 5 should just be printed as themselves."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "2\n",
      "Fizz\n",
      "4\n",
      "Buzz\n",
      "Fizz\n",
      "7\n",
      "8\n",
      "Fizz\n",
      "Buzz\n",
      "11\n",
      "Fizz\n",
      "13\n",
      "14\n",
      "FizzBuzz\n",
      "16\n",
      "17\n",
      "Fizz\n",
      "19\n",
      "Buzz\n",
      "Fizz\n",
      "22\n",
      "23\n",
      "Fizz\n",
      "Buzz\n",
      "26\n",
      "Fizz\n",
      "28\n",
      "29\n",
      "FizzBuzz\n",
      "31\n",
      "32\n",
      "Fizz\n",
      "34\n",
      "Buzz\n",
      "Fizz\n",
      "37\n",
      "38\n",
      "Fizz\n",
      "Buzz\n",
      "41\n",
      "Fizz\n",
      "43\n",
      "44\n",
      "FizzBuzz\n",
      "46\n",
      "47\n",
      "Fizz\n",
      "49\n",
      "Buzz\n"
     ]
    }
   ],
   "source": [
    "# for i in range(1,50):\n",
    "#     if i % 3 == 0 and i % 5 == 0:\n",
    "#         print('FizzBuzz')\n",
    "#     elif i % 3 == 0 and i % 5 != 0:\n",
    "#         print('Fizz')\n",
    "#     elif i % 5 == 0 and i % 3 != 0:\n",
    "#         print('Buzz')\n",
    "#     else:\n",
    "#         print(i)\n",
    "        \n",
    "        \n",
    "# for num in range(1, 51):\n",
    "#     # If num is divisible by both 3 and 5, \"FizzBuzz\" will be printed.\n",
    "#     if num % 3 == 0 and num % 5 == 0:\n",
    "#         print(\"FizzBuzz\")\n",
    "#     # If num is only divisible by 3, \"Fizz\" will be printed.\n",
    "#     elif num % 3 == 0:\n",
    "#         print(\"Fizz\")\n",
    "#     # If num is only divisible by 5, \"Buzz\" will be printed.\n",
    "#     elif num % 5 == 0:\n",
    "#         print(\"Buzz\")\n",
    "#     # num itself will be printed in all other cases.\n",
    "#     else:\n",
    "#         print(num)      "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Programming Challenge: Factorial\n",
    "Create a function which takes one positive integer as its input and returns its factorial.\n",
    "\n",
    "To make sure that your function works correctly, you should \n",
    "call it with the inputs 3, 4, and 5 and print what is returned by those calls.  \n",
    "For those inputs, you should get 6, 24, and 120, respectively."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-4-98d192b6542f>, line 2)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-4-98d192b6542f>\"\u001b[0;36m, line \u001b[0;32m2\u001b[0m\n\u001b[0;31m    return % i\u001b[0m\n\u001b[0m           ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "# def Function(i):\n",
    "#     return % i\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def factorial(n):\n",
    "    fact = 1\n",
    "    for num in range(2, n + 1):\n",
    "        fact *= num\n",
    "    return fact"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "120"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "factorial(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "factorial(3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Do all of this in a .py file in Pycharm:\n",
    "\n",
    "Create a variable called mixed_case and assign it the string \"A Song of Ice and Fire\"\n",
    "\n",
    "Use .isupper() to check if mixed_case is a string of all upper case letters.  print() the result.\n",
    "\n",
    "Use .islower() to check if mixed_case is a string of all lower case letters.  print() the result.\n",
    "\n",
    "Change all of the letters in mixed_case to upper case letters using .upper() and print() the result.\n",
    "\n",
    "Change all of the letters in mixed_case to lower case letters using .lower() and print() the result.\n",
    "\n",
    "Use the .istitle() method to check if mixed_case is title case and print the result.\n",
    "\n",
    "Create a variable called title_case and assign it the result of .title() being called on mixed_case.\n",
    "\n",
    "print() title_case\n",
    "\n",
    "Call startswith() on mixed_case with the letter mixed_case starts with as its argument.  print() the result.\n",
    "\n",
    "Call endswith() on mixed_case with the letter mixed_case ends with as its argument.  print() the result.\n",
    "\n",
    "Create a variable called words and assign it the result of split() being used on mixed_case.\n",
    "\n",
    "print the variable \"words\"\n",
    "\n",
    "Use the .join() method to join together all of the items in the list assigned\n",
    "to words as a single string.  Use .isalpha() to check if the string is made up entirely of letters.\n",
    "Finally, use print() to display the result."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False\n",
      "False\n"
     ]
    }
   ],
   "source": [
    "mixed_case = (\"A Song of Ice and Fire\")\n",
    "\n",
    "print(mixed_case.isupper())   \n",
    "\n",
    "print(mixed_case.islower()) \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'A SONG OF ICE AND FIRE'"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mixed_case.upper()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'a song of ice and fire'"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mixed_case.lower()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False\n"
     ]
    }
   ],
   "source": [
    "print(mixed_case.istitle())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "A Song Of Ice And Fire\n"
     ]
    }
   ],
   "source": [
    "title_case = mixed_case.title()\n",
    "print(title_case)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mixed_case.startswith(mixed_case)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "title_case.endswith(mixed_case)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
